#include "formulas.c"
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/*char *criar(int i){
    char *s = (char *)malloc(i * sizeof(char));
    return s;
}*/ 

/*int validade(char *s){
    int i = 0, j = 0;
    int k = 0;
    while(s[j] != '\0'){
        if(s[j] == '('){
            int cont1 = 1, cont2 = 0;
            for(j = i + 1; s[j] != '\0'; j++){
                if(s[j] == '('){
                    cont1++;
                }
                else if(s[j] == ')'){
                    cont2++;
                }
                else if(j == strlen(s) - 1){
                    if(cont1 != cont2)
                        return 7;
                }
            }
        }
        else if(s[k] == ')')
            return 8;
        j++;
    }
    while(s[i] != '\0'){
		if(i == strlen(s) - 1){
			if((s[i] >= 65 && s[i] >= 90) || s[i] == ')')
				return 0;
		}
        else if(s[i] == '~'){
			j = i;
            if(verNegacao(s, &j) != 0)
                return 1;
        }
        else if(s[i] == '-'){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    break;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[i] == ')'){
                    return 2;
                }
                else if(s[j] == '~'){
                    if(verNegacao(s, &j) != 0)
                        return 1;
                    else
                        break;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] == '='){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    break;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
                    return 2;
                }
                else if(s[j] == '~'){
                    if(verNegacao(s, &j) != 0)
                        return 1;
                    else
                        break;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] == '^'){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    break;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
                    return 2;
                }
                else if(s[j] == '~'){
                    if(verNegacao(s, &j) != 0)
                        return 1;
                    else
                        break;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] == '+'){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    break;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
                    return 2;
                }
                else if(s[j] == '~'){
                    if(verNegacao(s, &j) != 0)
                        return 1;
                    else
                        break;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] == '('){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    break;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
                    return 2;
                }
                else if(s[j] == '~'){
                    if(verNegacao(s, &j) != 0)
                        return 1;
                    else
                        break;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] == ')'){
            for(j = i + 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    return 4;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
                    break;
                }
                else if(s[j] == '~'){
                    return 1;
                }
                else if(s[j] == '('){
                    return 6;
                }
                else if(j == strlen(s) - 1){
                    break;
                }
            }
        }
        else if(s[0] >= 65 && s[0] <= 90){
            for(j = 1; 1; j++){
                if(s[j] >= 65 && s[j] <= 90){
                    return 4;
                }
                else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[i] == ')'){
					break;
                }
                else if(s[i] == '~'){
                    return 1;
                }
                else if(j == strlen(s) - 1){
                    return 3;
                }
            }
        }
        else if(s[i] >= 65 && s[i] <= 90){
            return 4;
        }
        else{
            return 5;
        }
        i = j;
        i++;
    }
    return 0;
}*/

/*int verNegacao(char *s, int *k){
    int j;
    for(j = *k + 1; 1; j++){
        if(s[j] >= 65 && s[j] <= 90){
            break;
        }
        else if(s[j] == '=' || s[j] == '^' || s[j] == '-' || s[j] == '+' || s[j] == ')'){
            return 1;
        }
        else if(j == strlen(s) - 1)
            return 2;
    }
    *k = j;
    return 0;
}*/

/*int separar(char *s){
    int i = 0, j;
    while(s[i] != 0){
        if(s[i] == '('){
            for(j = i + 1; 1; j++){

            }
        }
        i++;
    }
}*/

int main () {

    menu_inicial();

    Lista *l = criar();
    pilha *p = criar_pilha(); 
    simbolo c; 
    int quantidade=0;  //quantidade de simbolos apresentados
    int opcao;
    int sair;
    
    do {
        printf("\nDIGITE 0 PARA SAIR, OU QUALQUER OUTRO NUMERO PARA CONTINUAR.\n");
        scanf("%d", &sair);

        if (sair == 0 ){
            break;
        }
    
        do {
            menu_notacao();
            setbuf(stdin, NULL);
            scanf("%c", &c.caractere);

            printf("\nAPRESENTE O VALOR VERDADE DESSE TERMO. NOTACAO: 0 = FALSE, 1 = TRUE\n>> ");
            setbuf(stdin, NULL); 
            scanf("%d", &c.valor_vdd_1);

            quantidade++;

            if (c.valor_vdd_1 == -1) {
                inserirfim(l, c);
                break;
            }
    

            printf("\nAPRESENTE UM CONECTIVO. \nNOTACAO: \n'=' == SE\n'-' == SE, E SOMENTE SE\n'*' == AND\n'!' == NOT \n'+' == OR\n>> "); 
            setbuf(stdin, NULL); 
            scanf("%c", &c.conectivo);

            inserirfim(l, c);
            printf("\nDIGITE 0 SE NAO DESEJAR PROSSEGUIR\n>> ");
            scanf("%d", &opcao);

        }while (opcao != -0);

        int verf;
        verf = verificar(l); 
        
        if (( verificar(l) == 0 ) || ( verificar(l) <= 12 ) || ( verificar(l) == 13 ) || (verificar(l) >= 30) ) {
            printf("\nERRO. TERMOS APRESENTADOS SAO INVALIDOS. TENTE NOVAMENTE\n"); 
        }

        mostrar(l); 
        int valor = -1;
        printf("\nTESTE: QUANTIDADE == %d", quantidade); 

        valor = interpretar_varios(l, p, quantidade);
        if (valor == 0) {

            printf("\nFORMULA: FALSE.");

        }
        if (valor == 1) {

            printf("\nFORMULA: TRUE."); 
            mostrar_pilha(p); 
            limpar(l); 
        }

    }while (sair != 0);

    printf("\nCONCLUIDO.\n"); 

    return 0; 
    
}



